'''
描述:
给你两个正整数a(0 < a < 100000)和n(0 <= n <=100000000000)，计算(a^n) % 20132013并输出结果
'''
#这个是最简约解法
print pow(a,n,20132013)

def powAndMod(a,n,mod):
    res = 1
    while n > 0:
        if n%2 == 1:
            res = res * a % mod
            a = a * a % mod
        n >>= 1
    return res
print powAndMod(a,n,20132013)
对于任意a和n求a的n次幂，a^n可以转化为a^(p+q),其中p+q=n,因此我们只要把a^n转
化为几个适当的p,q,满足a^q * a^p * ....a^x = a^n，这样可以大大简化算法的
复杂度。我们可以先把十进制数n化为二进制数xxxxxxxx(2),如100可以化为11
00100(2)，拆分为幂的和为：2、32、64,然后分别算2^2,2^32,2^64的数值，把它们相
乘即可得到2^100。
